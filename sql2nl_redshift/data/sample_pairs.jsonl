{"sql": "SELECT user_id, COUNT(*) AS orders FROM public.orders GROUP BY 1 ORDER BY orders DESC LIMIT 10;", "nl": "Returns the top 10 users by number of orders from public.orders."}
{"sql": "SELECT * FROM public.users LIMIT 5;", "nl": "Shows the first 5 rows from public.users with all columns."}
{"sql": "SELECT o.order_id, o.user_id, SUM(oi.amount) AS revenue FROM public.orders o JOIN public.order_items oi ON oi.order_id = o.order_id WHERE o.status = 'complete' GROUP BY 1,2 ORDER BY revenue DESC;", "nl": "For completed orders, sums item amounts per order and user and sorts by highest revenue."}
{"sql": "SELECT user_id, AVG(total) AS avg_spend FROM public.orders WHERE created_at >= dateadd('day', -30, getdate()) GROUP BY 1 ORDER BY avg_spend DESC;", "nl": "For the last 30 days, computes average order total per user and sorts by highest average spend (Redshift DATEADD)."}
{"sql": "SELECT event_type, COUNT(*) FROM public.events GROUP BY 1;", "nl": "Counts events per event_type from public.events."}
{"sql": "SELECT user_id, total, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) AS rn FROM public.orders QUALIFY rn = 1;", "nl": "Finds each user's most recent order using ROW_NUMBER and filters with QUALIFY (Redshift)."}
{"sql": "SELECT DISTINCT country FROM spectrum.sales_events WHERE year=2025;", "nl": "Lists distinct countries from external Spectrum table spectrum.sales_events for year 2025."}
{"sql": "SELECT COUNT(*) FROM svv_tables WHERE schema = 'public';", "nl": "Counts tables in the 'public' schema using a Redshift system view (SVV_TABLES)."}
{"sql": "SELECT product_id, LISTAGG(tag, ', ') WITHIN GROUP (ORDER BY tag) AS tags FROM public.product_tags GROUP BY 1;", "nl": "Concatenates tags per product ordered alphabetically using LISTAGG."}
{"sql": "SELECT date_trunc('day', created_at) AS day, COUNT(*) FROM public.sessions GROUP BY 1 ORDER BY 1;", "nl": "Counts sessions by day using DATE_TRUNC, ordered chronologically."}
{"sql": "SELECT user_id, SUM(amount) FILTER (WHERE amount>0) AS credits FROM public.transactions GROUP BY 1;", "nl": "Sums positive transaction amounts per user."}
{"sql": "SELECT user_id, SUM(amount) AS net, AVG(SUM(amount)) OVER () AS overall_avg FROM public.transactions GROUP BY 1;", "nl": "Calculates each user's net sum and the overall average of net sums using a window function."}
{"sql": "SELECT order_id, PERCENTILE_DISC(0.9) WITHIN GROUP (ORDER BY amount) AS p90 FROM public.order_items GROUP BY 1;", "nl": "Computes the 90th percentile of item amounts per order."}
{"sql": "SELECT COUNT(*) FROM public.events WHERE event_type = 'purchase';", "nl": "Counts purchase events."}
{"sql": "SELECT u.user_id, u.email FROM public.users u LEFT JOIN public.orders o ON o.user_id = u.user_id WHERE o.user_id IS NULL;", "nl": "Lists users who have never placed an order (LEFT JOIN with NULL check)."}
{"sql": "SELECT product_id, SUM(quantity) AS qty FROM public.order_items WHERE created_at BETWEEN '2025-01-01' AND '2025-06-30' GROUP BY 1 ORDER BY qty DESC LIMIT 20;", "nl": "Top 20 products by total quantity sold between 2025-01-01 and 2025-06-30."}
{"sql": "UNLOAD ('SELECT * FROM public.orders WHERE created_at >= dateadd(day, -7, getdate())') TO 's3://my-bucket/exports/orders_' IAM_ROLE 'arn:aws:iam::123456789012:role/RedshiftCopyUnload' FORMAT AS PARQUET;", "nl": "Exports last 7 days of orders to S3 using UNLOAD in Parquet format (Redshift)."}
{"sql": "COPY public.events FROM 's3://my-bucket/events/2025/' IAM_ROLE 'arn:aws:iam::123456789012:role/RedshiftCopyUnload' FORMAT AS JSON 'auto';", "nl": "Loads JSON event data from S3 into public.events using COPY (Redshift)."}
{"sql": "SELECT user_id, COUNT(DISTINCT session_id) AS sessions FROM public.sessions GROUP BY 1 HAVING COUNT(DISTINCT session_id) >= 5;", "nl": "Counts distinct sessions per user and keeps users with at least 5 sessions."}
{"sql": "SELECT user_id, SUM(amount) AS spend FROM public.transactions WHERE created_at >= current_date - 90 GROUP BY 1 ORDER BY spend DESC;", "nl": "Top spenders in the last 90 days by summing transaction amounts per user."}
{"sql": "SELECT order_id, created_at, SUM(amount) OVER (PARTITION BY order_id ORDER BY created_at ROWS UNBOUNDED PRECEDING) AS running FROM public.order_events;", "nl": "Computes a running total per order over time using a window frame."}
{"sql": "SELECT * FROM pg_table_def WHERE schemaname='public' AND tablename='orders';", "nl": "Inspects column definitions for public.orders via the PG_TABLE_DEF system table."}
{"sql": "SELECT DATE_TRUNC('month', created_at) AS month, COUNT(*) FILTER (WHERE status='complete') AS completed, COUNT(*) FILTER (WHERE status='cancelled') AS cancelled FROM public.orders GROUP BY 1 ORDER BY 1;", "nl": "By month, counts completed and cancelled orders using filtered aggregates, ordered by month."}
{"sql": "SELECT order_id, COUNT(*) AS cnt FROM public.order_items GROUP BY 1 QUALIFY cnt > 5;", "nl": "Keeps only orders with more than 5 items using QUALIFY (Redshift)."}
{"sql": "SELECT DISTINCT user_id FROM public.events WHERE created_at >= dateadd('day', -1, current_date);", "nl": "Distinct users with events in the last 1 day."}
